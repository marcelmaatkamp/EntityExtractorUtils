dependsOnChildren() 

allprojects {

  apply plugin: 'maven'
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  sourceCompatibility = 1.6
  targetCompatibility = 1.6 
  
  repositories {

     mavenRepo name: 'plugins-repo-local', 	urls: "http://127.0.0.1:8085/artifactory/plugins-release"
     mavenRepo name: 'libs-repo-local',		urls: "http://127.0.0.1:8085/artifactory/libs-release"
     mavenRepo name: 'plugins-repo-asrock', 	urls: "http://192.168.1.108:8085/artifactory/plugins-release"
     mavenRepo name: 'libs-repo-asrock',    	urls: "http://192.168.1.108:8085/artifactory/libs-release"
    if (hasProperty('repo')) {
      localRepo=repo
    } else {
      localRepo="file://" + System.getProperty('user.home') + "/.m2/repository/"
    }
    mavenRepo urls: localRepo
    mavenRepo(urls: "http://mirrors.ibiblio.org/pub/mirrors/")
    mavenRepo(urls: "http://download.java.net/maven/2/")
    mavenRepo(urls: "http://repository.codehaus.org")
    mavenRepo(urls: "http://www.ibiblio.org/maven/mule/dependencies/maven2/")
    mavenRepo(urls: "https://maven.nuxeo.org/nexus/content/groups/public/")
    mavenRepo(urls: "http://source.mysema.com/maven2/releases")
    mavenRepo(urls: "http://maven.springframework.org/snapshot")
    mavenRepo(urls: "http://maven.springframework.org/milestone")
    mavenRepo(urls: "http://oss.sonatype.org/content/repositories/releases/")
    mavenRepo(urls: "http://oss.sonatype.org/content/repositories/snapshots/")
    mavenRepo(urls: "http://oss.sonatype.org/content/repositories/milestones/")
    mavenRepo(urls: "http://shrub.appspot.com/maven.springframework.org/release/")
    mavenRepo(urls: "http://shrub.appspot.com/maven.springframework.org/milestones/")
    mavenRepo(urls: "http://shrub.appspot.com/maven.springframework.org/snapshots/")
    mavenRepo(urls: "http://maven.springframework.org.s3.amazonaws.com/release/")
    mavenRepo(urls: "http://m2.neo4j.org/")
    mavenRepo(urls: "http://repo.open.med.harvard.edu/nexus/content/repositories/thirdparty")

    mavenCentral()
  }
  dependencies {
    // runtime group: 'org.groovy', name: 'groovy', version: '1.7.10', ext: 'jar'
    groovy group: 'org.codehaus.groovy', name: 'groovy', version: '1.7.10'
    testCompile group: 'junit', name: 'junit', version: '4.7'

    compile "org.springframework.data:spring-data-mongodb:1.0.0.M1"
    compile("org.springframework.data:spring-data-redis:1.0.0.M2") {
               exclude module:"jredis-anthonylauzon"
    }

    // compile "org.aspectj:aspectjrt:1.6.10.RELEASE"
    compile "org.springframework.data:spring-data-neo4j:1.0.0.M4"
    compile "org.springframework.data:spring-data-jpa:1.0.0.M2"
    compile "xstream:xstream:1.2.2"
    compile "org.codehaus.jettison:jettison:1.2"
    compile "dnsjava:dnsjava:2.1.0"
    compile "mysql:mysql-connector-java:5.1.13"

    compile "org.slf4j:slf4j-api:1.6.1"
    compile "org.slf4j:slf4j-simple:1.6.1"
    compile "org.slf4j:slf4j-jdk14:1.6.1"
    compile "org.slf4j:slf4j-log4j12:1.6.1"

 // compile "org.slf4j:slf4j-api:1.5.10"
 // compile "org.slf4j:slf4j-jdk14:1.5.10"
 // compile "org.slf4j:slf4j-log4j12:1.5.10"

    compile "edu.stanford.nlp:stanford-ner:1.1.1"
    compile "edu.stanford.nlp:stanford-ner-models:1.1.1"

    compile "com.mysema.querydsl:querydsl-apt:2.1.2"
    compile "com.mysema.querydsl:querydsl-hql:1.9.7"

    compile "edu.stanford.nlp:stanford-ner:1.1.1"
    compile "edu.stanford.nlp:stanford-ner-models:1.1.1"
    compile "com.aliasi:lingpipe:4.0.1"
    compile "org.apache.xmlgraphics:fop:1.0"
    compile "org.apache.ivy:ivy:2.1.0"

 // https://s3browse.springsource.com/browse/maven.springframework.org/milestone/org/springframework/data/
    compile "org.springframework.data:spring-data-neo4j:1.0.0.RC1"
    compile "org.springframework.data:spring-data-jpa:1.0.0.RC1"
    compile "org.springframework.data:spring-data-riak:1.0.0.M3"
 
// --
    compile 'org.apache.mahout.hadoop:hadoop-core:0.19.1'
    compile 'org.apache.nutch:nutch:1.3'
    compile 'org.apache.tika:tika-core:0.9'
    compile 'org.apache.tika:tika-parsers:0.9'
    compile 'commons-lang:commons-lang:2.2'
    compile 'org.apache.mahout.commons:commons-cli:2.0-mahout'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.apache.commons:commons-cli:2.0-SNAPSHOT'
  }
 
  defaultTasks "produceJson"
  jar.exclude 'log4j.properties' 

  task ("ner",dependsOn: 'classes', type: JavaExec) { 
    main = "nl.klpd.nhtcu.tools.ner.stanford.Ner"
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3G"
  }

  task ("importChatsInDatabase", dependsOn: 'classes', type: JavaExec) {
    main = "entity_extractor.Database"
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3G"
  }

  task ("produceJson", dependsOn: 'classes', type: JavaExec) {
    main = "entity_extractor.ProduceJSON"
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3G"
  }

  task ("determineLocationsPerNick", dependsOn: 'classes', type: JavaExec) {
    main = "entity_extractor.NickLocation"
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "5G"
  }

  task ("determineLanguagePerNick", dependsOn: 'classes', type: JavaExec) {
    main = "entity_extractor.NickLanguage"
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "2G"
  }

  task ("importKVIrcChats", dependsOn: 'classes', type: JavaExec) {
    main = "kvirc.KVIrcChatImportStarter"
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "2G"
  }

  task ("pvKVIrcChats", dependsOn: 'classes', type: JavaExec) {
    main = "kvirc.KVIrcChatImporter"
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "2G"
  }

  // -- 

  task ("importMircChats", dependsOn: 'classes', type: JavaExec) {
    main = "mirc.MircParser"
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "2G"
  }


  task ("pv", dependsOn: 'classes', type: JavaExec) {
    main = "entity_extractor.PV_Lex"
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "2G"
  }

  // --

  task ("nutchExtractor", dependsOn: 'classes', type: JavaExec) {
    main = "nutch.NutchExtractor"
    classpath = sourceSets.main.runtimeClasspath
    args "bla"
    maxHeapSize = "2G"
  }

  task ("nutchTikaExtractor", dependsOn: 'classes', type: JavaExec) {
    main = "nutch.NutchTikaExtractor"
    classpath = sourceSets.main.runtimeClasspath
    args "bla"
    maxHeapSize = "2G"
  }

  task ("nutchFilenameExtractor", dependsOn: 'classes', type: JavaExec) {
    main = "nutch.NutchFilenameExtractor"
    classpath = sourceSets.main.runtimeClasspath
    args "bla"
    maxHeapSize = "2G"
  }

  task ("nutchSearch", dependsOn: 'classes', type: JavaExec) {
    main = "nutch.NutchSearch"
    classpath = sourceSets.main.runtimeClasspath
    args "crawl/crawldb crawl/segments topN 5000"
    maxHeapSize = "2G"
  }

  task ("tika", dependsOn: 'classes', type: JavaExec) {
    main = "util.TikaExplorer"
    classpath = sourceSets.main.runtimeClasspath
    args "crawl/crawldb crawl/segments topN 5000"
    maxHeapSize = "2G"
  }

}

